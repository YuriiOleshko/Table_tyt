{"version":3,"sources":["Table8.jsx","NewTable.jsx","App.js","serviceWorker.js","index.js","logo.svg","Task.module.css"],"names":["Table8","showTotal","react_default","a","createElement","options","page","prePage","nextPage","firstPage","lastPage","paginationShowsTotal","this","lib","data","props","pagination","cellEdit","mode","nonEditableRows","isKey","dataField","width","filter","type","delay","Component","Table1","src_Table8","dataTwo","App","state","dataPersons","isLoading","updateDate","getDate","_this","setState","Object","toConsumableArray","setColum","_this2","axios","then","console","log","_this$state","className","NewTable","dataVer","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister","module","exports","__webpack_require__","p","firstLine"],"mappings":"qQA8EeA,4NA/DfC,UAAU,WACN,OAAOC,EAAAC,EAAAC,cAAA,+GAGP,IAQMC,EAAU,CACdC,KAAM,EACNC,QAAU,SACVC,SAAU,SACVC,UAAW,SACXC,SAAU,SACVC,qBAAsBC,KAAKX,WAE7B,OACEC,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAACS,EAAA,eAAD,CAAgBC,KAAMF,KAAKG,MAAMD,KACjCE,YAAY,EACZX,QAASA,EACTY,SArBiB,CACnBC,KAAM,QACNC,gBAAiB,WACf,MAAO,CAAC,MAoBRjB,EAAAC,EAAAC,cAACS,EAAA,kBAAD,CAAmBO,OAAK,EAACC,UAAU,KACnCC,MAAM,MADN,UAKApB,EAAAC,EAAAC,cAACS,EAAA,kBAAD,CAAoBQ,UAAU,OAC9BE,OAAS,CAAEC,KAAM,aAAcC,MAAO,MADtC,QAIEvB,EAAAC,EAAAC,cAACS,EAAA,kBAAD,CAAmBQ,UAAU,QAAOE,OAAS,CAAEC,KAAM,aAAcC,MAAO,MAA1E,SAIAvB,EAAAC,EAAAC,cAACS,EAAA,kBAAD,CAAmBQ,UAAU,QAC7BE,OAAS,CAAEC,KAAM,aAAcC,MAAO,MADtC,SAKAvB,EAAAC,EAAAC,cAACS,EAAA,kBAAD,CAAmBQ,UAAU,QAC7BE,OAAS,CAAEC,KAAM,aAAcC,MAAO,MADtC,SAKAvB,EAAAC,EAAAC,cAACS,EAAA,kBAAD,CAAmBQ,UAAU,OAC7BE,OAAS,CAAEC,KAAM,aAAcC,MAAO,MADtC,iBAxDWC,cCSNC,mLAVX,OACEzB,EAAAC,EAAAC,cAAA,WAEEF,EAAAC,EAAAC,cAACwB,EAAD,CAAQd,KAAMF,KAAKG,MAAMc,kBALZH,aCuDNI,6MApDbC,MAAM,CACJC,YAAY,GACZC,WAAU,EACVnB,KAAK,MAmBPoB,WAAW,eAIXC,QAAQ,SAACrB,GACPsB,EAAKC,SAAS,CACZL,YAAYM,OAAAC,EAAA,EAAAD,CAAIxB,EAAKA,MACrBmB,WAAU,OAIdO,SAAS,gGA1BU,IAAAC,EAAA7B,KACjB8B,IAAM,0BACLC,KAAK,SAAA7B,GAAO8B,QAAQC,IAAI/B,EAAKA,MAC5B2B,EAAKN,QAAQrB,EAAKA,yCA6Bb,IAAAgC,EAEuBlC,KAAKmB,MAA5BE,EAFAa,EAEAb,UAAUD,EAFVc,EAEUd,YACjB,OACG9B,EAAAC,EAAAC,cAAA,OAAK2C,UAAU,OACVd,EAAY/B,EAAAC,EAAAC,cAAA,uBAAmBF,EAAAC,EAAAC,cAAC4C,EAAD,CAAUlC,KAAMF,KAAKmB,MAAMkB,QAASpB,QAASG,YA9CtEN,aCKEwB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAOtD,EAAAC,EAAAC,cAACqD,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMnB,KAAK,SAAAoB,GACjCA,EAAaC,6FEnInBC,EAAAC,QAAiBC,EAAAC,EAAuB,0ECCxCH,EAAAC,QAAA,CAAkBG,UAAA","file":"static/js/main.efe005d5.chunk.js","sourcesContent":["import React, {Component} from 'react'\r\nimport {BootstrapTable, TableHeaderColumn} \r\n        from 'react-bootstrap-table'\r\nimport './Table.css'\r\nimport axios from 'axios';\r\n\r\nimport '../node_modules/react-bootstrap-table/dist/react-bootstrap-table-all.min.css'\r\n \r\n \r\nclass Table8 extends Component {\r\n\r\n  // componentDidUpdate(){\r\n  //   axios.post('http://localhost:8080',this.props.data).then(data=>console.log(data) )\r\n  //   console.log(this.props.data)\r\n  // }\r\nshowTotal=() =>{\r\n    return <p>There are 100 items total</p>\r\n  }\r\n  render() {\r\n    const cellEditProp = {\r\n      mode: 'click', // 'dbclick' for trigger by double-click\r\n      nonEditableRows: function() {\r\n        return [3];\r\n      }\r\n      \r\n    }\r\n  \r\n    const options = {\r\n      page: 1,\r\n      prePage:  '⟵',\r\n      nextPage: '⟶',\r\n      firstPage: '⟸',\r\n      lastPage: '⟹',\r\n      paginationShowsTotal: this.showTotal\r\n    }\r\n    return (\r\n      <div>\r\n        <BootstrapTable data={this.props.data}\r\n        pagination={true}\r\n        options={options}                \r\n        cellEdit={cellEditProp}\r\n        >\r\n        <TableHeaderColumn isKey dataField='id'\r\n        width=\"60\"\r\n        >\r\n          №\r\n        </TableHeaderColumn>\r\n        <TableHeaderColumn  dataField='name'\r\n        filter={ { type: 'TextFilter', delay: 1000 } }>\r\n          Name\r\n        </TableHeaderColumn>\r\n          <TableHeaderColumn dataField='email'filter={ { type: 'TextFilter', delay: 1000 } }\r\n          >\r\n            Email\r\n          </TableHeaderColumn>\r\n          <TableHeaderColumn dataField='funds'\r\n          filter={ { type: 'TextFilter', delay: 1000 } }\r\n          >\r\n            Funds\r\n          </TableHeaderColumn>\r\n          <TableHeaderColumn dataField='phone'\r\n          filter={ { type: 'TextFilter', delay: 1000 } }\r\n          >\r\n            Phone\r\n          </TableHeaderColumn>\r\n          <TableHeaderColumn dataField='city'\r\n          filter={ { type: 'TextFilter', delay: 1000 } }\r\n          >\r\n            City\r\n          </TableHeaderColumn>\r\n       \r\n       \r\n        </BootstrapTable>\r\n      </div>\r\n    )\r\n  }\r\n}\r\n \r\nexport default Table8","import React, { Component } from 'react';\r\n\r\nimport '../node_modules/react-bootstrap-table/css/react-bootstrap-table.css'\r\n\r\n import Table8 from './Table8'\r\n \r\nclass Table1 extends Component {\r\n  render() {\r\n    return (\r\n      <div>\r\n       \r\n        <Table8 data={this.props.dataTwo} />\r\n\r\n      </div>\r\n    );\r\n  }\r\n}\r\n \r\nexport default Table1;","import React, { Component } from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport  styles from './Task.module.css'\nimport axios from 'axios';\nimport NewTable from './NewTable'\n\nclass App extends Component {\n\n  state={\n    dataPersons:[],\n    isLoading:true,\n    data:[],\n    \n  }\n\n  componentDidMount(){\n    axios('http://localhost:8080/')\n    .then(data=>{console.log(data.data);\n      this.getDate(data.data)\n  \n      })\n    \n  }\n\n  // componentDidUpdate(){\n\n  //   axios.put(`http://localhost:8080/update/:${10}`,this.state.dataPersons.find(el=>el.id===10)).then(data=>console.log(data) )\n  //   console.log(this.state.dataPersons)\n  // }\n\n  updateDate=()=>{\n\n  }\n\n  getDate=(data)=>{\n    this.setState({\n      dataPersons:[...data.data],\n      isLoading:false\n    })\n  }\n\n  setColum=()=>{\n    \n  }\n  \n\n      \n  render() {\n   \n    const {isLoading,dataPersons}=this.state\n    return (\n       <div className=\"App\">\n          { isLoading ? <p>Loading...</p> :<NewTable data={this.state.dataVer} dataTwo={dataPersons}/>}\n         \n      </div>\n    );\n  }\n}\n\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","// extracted by mini-css-extract-plugin\nmodule.exports = {\"firstLine\":\"Task_firstLine__3pVho\"};"],"sourceRoot":""}