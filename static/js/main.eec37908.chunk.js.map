{"version":3,"sources":["Table8.jsx","App.js","serviceWorker.js","index.js"],"names":["Table8","showTotal","react_default","a","createElement","onAfterSaveCell","row","obj","prop","Object","objectSpread","_this","props","setChange","onBeforeSaveCell","cellName","cellValue","cellEditProp","mode","blurToSave","beforeSaveCell","this","afterSaveCell","console","log","options","page","prePage","nextPage","firstPage","lastPage","paginationShowsTotal","lib","data","pagination","cellEdit","isKey","dataField","width","className","name","onChange","change","type","placeholder","onClick","compeaDate","Component","App","state","dataPersons","isLoading","value","rowStr","getAxios","axios","concat","then","getDate","objUpdate","id","put","handelChange","ev","vale","target","nam","setState","toConsumableArray","setColum","setTimeout","_this2","_this$state","src_Table8","val","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.eec37908.chunk.js","sourcesContent":["import React, {Component} from 'react'\r\nimport {BootstrapTable, TableHeaderColumn} \r\n        from 'react-bootstrap-table'\r\nimport './Table.css'\r\n\r\n\r\nimport '../node_modules/react-bootstrap-table/dist/react-bootstrap-table-all.min.css'\r\n \r\n \r\nclass Table8 extends Component {\r\n\r\n \r\nshowTotal=() =>{\r\n    return <p>There are 100 items total</p>\r\n  }\r\n\r\n  \r\n   onAfterSaveCell =(row) =>{\r\n    let obj={}\r\n    for (const prop in row) {\r\n      obj={ ...row}\r\n    }\r\n    this.props.setChange(obj)\r\n \r\n}\r\n\r\n onBeforeSaveCell=(row, cellName, cellValue)=> {\r\n  // You can do any validation on here for editing value,\r\n  // return false for reject the editing\r\n  return true;\r\n}\r\n\r\n  render() {\r\n    const cellEditProp = {\r\n      mode: 'click', // 'dbclick' for trigger by double-click\r\n      blurToSave: true,\r\n      beforeSaveCell: this.onBeforeSaveCell, // a hook for before saving cell\r\n      afterSaveCell: this.onAfterSaveCell  // a hook for after saving cell\r\n      \r\n      \r\n      \r\n    }\r\n    console.log(cellEditProp)\r\n    console.log(this.props)\r\n    const options = {\r\n      page: 1,\r\n      prePage:  '⟵',\r\n      nextPage: '⟶',\r\n      firstPage: '⟸',\r\n      lastPage: '⟹',\r\n      paginationShowsTotal: this.showTotal\r\n    }\r\n    return (\r\n      <div>\r\n        <BootstrapTable data={this.props.data}\r\n        pagination={true}\r\n        options={options}                \r\n        cellEdit={cellEditProp}\r\n        >\r\n        <TableHeaderColumn isKey dataField='id'\r\n        width=\"60\"\r\n        >\r\n          №\r\n        </TableHeaderColumn>\r\n        <TableHeaderColumn  dataField='name'>\r\n          Name\r\n          <input className=\"filter text-filter form-control\" name='name' onChange={this.props.change} type=\"text\" placeholder=\"Enter Name...\"/>\r\n\r\n        </TableHeaderColumn>\r\n          <TableHeaderColumn dataField='email'>\r\n            Email\r\n            <input className=\"filter text-filter form-control\" name='email'  onChange={this.props.change} type=\"text\" placeholder=\"Enter Email...\"/>\r\n\r\n          </TableHeaderColumn>\r\n          <TableHeaderColumn dataField='funds'>\r\n            Funds\r\n            <input className=\"filter text-filter form-control\" name='funds'  onChange={this.props.change} type=\"text\" placeholder=\"Enter Funds...\"/>\r\n\r\n          </TableHeaderColumn>\r\n          <TableHeaderColumn dataField='phone' >\r\n            Phone\r\n            <input className=\"filter text-filter form-control\" name='phone' onClick={this.compeaDate}  onChange={this.props.change} type=\"text\" placeholder=\"Enter Phone...\"/>\r\n\r\n          </TableHeaderColumn>\r\n          <TableHeaderColumn dataField='city'>\r\n            City\r\n            <input className=\"filter text-filter form-control\" name='city'  onChange={this.props.change} type=\"text\" placeholder=\"Enter City...\"/>\r\n\r\n          </TableHeaderColumn>\r\n       \r\n       \r\n        </BootstrapTable>\r\n      </div>\r\n    )\r\n  }\r\n}\r\n \r\nexport default Table8","import React, {\n  Component\n} from 'react';\n\nimport './App.css';\nimport axios from 'axios';\nimport Table8 from './Table8'\n\nclass App extends Component {\n\n  state = {\n    dataPersons: [],\n    isLoading: true,\n\n    value: '',\n    name: '',\n    rowStr: {}\n\n  }\n\n  componentDidMount() {\n    axios('http://localhost:8080/')\n      .then(data => {\n        console.log(data.data);\n        this.getDate(data.data)\n\n      })\n\n  }\n\n  getAxios = () => {\n    axios(`http://localhost:8080/?${this.state.name}=${this.state.value}`)\n      .then(data => {\n        console.log(data.data);\n\n        this.getDate(data.data)\n      })\n   \n  }\n\n  objUpdate = () => {\n    console.log(this.state.rowStr.id);\n    axios.put(`http://localhost:8080/update/${this.state.rowStr.id}`, this.state.rowStr).then(data =>\n      console.log(data))\n  }\n  handelChange = (ev) => {\n    let vale = ev.target.value\n    let nam = ev.target.name\n    this.setState({\n      value: vale,\n      name: nam\n    })\n    this.getAxios();\n\n  }\n  getDate = (data) => {\n    this.setState({\n      dataPersons: [...data.data],\n      isLoading: false,\n\n    })\n  }\n\n  setColum = (data) => {\n    this.setState({\n      rowStr: {\n        ...data\n      }\n    })\n\n    let timerId = setTimeout(this.objUpdate, 400)\n  }\n\n\n\n  render() {\n\n    const {\n      isLoading,\n      dataPersons,\n      value,\n      name\n    } = this.state\n    return ( <\n      div className = \"App\" > {\n        isLoading ? < p > Loading... < /p> :<Table8  data={dataPersons} val={value} change={this.handelChange} nam={name} setChange={this.setColum} / >\n      }\n\n      <\n      /div>\n    );\n  }\n}\n\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}