{"version":3,"sources":["Table8.jsx","App.js","serviceWorker.js","index.js"],"names":["Table8","state","data","currentPage","showTotal","currPage","console","log","react_default","a","createElement","onAfterSaveCell","row","obj","prop","Object","objectSpread","_this","props","setChange","setPagin","onBeforeSaveCell","cellName","cellValue","cellEditProp","mode","blurToSave","beforeSaveCell","this","afterSaveCell","options","page","prePage","nextPage","firstPage","lastPage","paginationShowsTotal","lib","pagination","cellEdit","isKey","dataField","width","className","name","onChange","change","type","placeholder","onClick","compeaDate","Component","App","dataPersons","isLoading","value","rowStr","funds","email","city","phone","getAxios","_this$state","concat","axios","then","getDate","objUpdate","id","put","handelChange","ev","vale","target","nam","setState","defineProperty","toConsumableArray","setColum","setTimeout","_this2","_this$state2","onPageChange","src_Table8","val","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.e2069162.chunk.js","sourcesContent":["import React, { Component } from \"react\";\r\nimport { BootstrapTable, TableHeaderColumn } from \"react-bootstrap-table\";\r\nimport \"./Table.css\";\r\n\r\n// import Table9 from './Table9'\r\n\r\nimport \"../node_modules/react-bootstrap-table/dist/react-bootstrap-table-all.min.css\";\r\n\r\nclass Table8 extends Component {\r\n  state = {\r\n    data: \"\",\r\n    currentPage: \"\"\r\n  };\r\n\r\n  showTotal = currPage => {\r\n    console.log(currPage);\r\n\r\n    return <p>There are 100 items total </p>;\r\n  };\r\n\r\n  // onPageChange=(page, sizePerPage)=> {\r\n  //   const currentIndex = (page - 1) * sizePerPage;\r\n  //   this.setState({\r\n  //     // data: this.products.slice(currentIndex, currentIndex + sizePerPage),\r\n  //     currentPage: page\r\n  //   });\r\n  // }\r\n\r\n  onAfterSaveCell = row => {\r\n    let obj = {};\r\n    for (const prop in row) {\r\n      obj = { ...row };\r\n    }\r\n    this.props.setChange(obj);\r\n  };\r\n  setPagin = currPage => {\r\n    console.log(currPage);\r\n  };\r\n  onBeforeSaveCell = (row, cellName, cellValue) => {\r\n    // You can do any validation on here for editing value,\r\n    // return false for reject the editing\r\n    return true;\r\n  };\r\n\r\n  render() {\r\n    const cellEditProp = {\r\n      mode: \"click\", // 'dbclick' for trigger by double-click\r\n      blurToSave: true,\r\n      beforeSaveCell: this.onBeforeSaveCell, // a hook for before saving cell\r\n      afterSaveCell: this.onAfterSaveCell // a hook for after saving cell\r\n    };\r\n    console.log(cellEditProp);\r\n    console.log(this.props);\r\n\r\n    const options = {\r\n      page: 1,\r\n      prePage: \"⟵\",\r\n      nextPage: \"⟶\",\r\n      firstPage: \"⟸\",\r\n      lastPage: \"⟹\",\r\n      paginationShowsTotal: this.showTotal\r\n      // onPageChange: this.onPageChange\r\n    };\r\n\r\n    return (\r\n      <div>\r\n        <BootstrapTable\r\n          data={this.props.data}\r\n          pagination={true}\r\n          options={options}\r\n          cellEdit={cellEditProp}\r\n        >\r\n          <TableHeaderColumn isKey dataField=\"id\" width=\"60\">\r\n            №\r\n          </TableHeaderColumn>\r\n          <TableHeaderColumn dataField=\"name\">\r\n            Name\r\n            <input\r\n              className=\"filter text-filter form-control\"\r\n              name=\"name\"\r\n              onChange={this.props.change}\r\n              type=\"text\"\r\n              placeholder=\"Enter Name...\"\r\n            />\r\n          </TableHeaderColumn>\r\n          <TableHeaderColumn dataField=\"email\">\r\n            Email\r\n            <input\r\n              className=\"filter text-filter form-control\"\r\n              name=\"email\"\r\n              onChange={this.props.change}\r\n              type=\"text\"\r\n              placeholder=\"Enter Email...\"\r\n            />\r\n          </TableHeaderColumn>\r\n          <TableHeaderColumn dataField=\"funds\">\r\n            Funds\r\n            <input\r\n              className=\"filter text-filter form-control\"\r\n              name=\"funds\"\r\n              onChange={this.props.change}\r\n              type=\"text\"\r\n              placeholder=\"Enter Funds...\"\r\n            />\r\n          </TableHeaderColumn>\r\n          <TableHeaderColumn dataField=\"phone\">\r\n            Phone\r\n            <input\r\n              className=\"filter text-filter form-control\"\r\n              name=\"phone\"\r\n              onClick={this.compeaDate}\r\n              onChange={this.props.change}\r\n              type=\"text\"\r\n              placeholder=\"Enter Phone...\"\r\n            />\r\n          </TableHeaderColumn>\r\n          <TableHeaderColumn dataField=\"city\">\r\n            City\r\n            <input\r\n              className=\"filter text-filter form-control\"\r\n              name=\"city\"\r\n              onChange={this.props.change}\r\n              type=\"text\"\r\n              placeholder=\"Enter City...\"\r\n            />\r\n          </TableHeaderColumn>\r\n        </BootstrapTable>\r\n        {/* <Table9/> */}\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Table8;\r\n","import React, {\n  Component\n} from 'react';\n\nimport './App.css';\nimport axios from 'axios';\nimport Table8 from './Table8'\n\nclass App extends Component {\n\n  state = {\n    dataPersons: [],\n    isLoading: true,\n\n    value: '',\n    name: '',\n    rowStr: {},\n    funds: '',\n    email: '',\n    city: '',\n    phone: '',\n    currentPage: ''\n\n  }\n\n  componentDidMount() {\n    axios(`http://localhost:8080/?limit=50&offset=0`)\n      .then(data => {\n        console.log(data.data);\n        this.getDate(data.data)\n\n      })\n\n  }\n\n  getAxios = () => {\n    const {\n      email,\n      funds,\n      phone,\n      name,\n      city\n    } = this.state\n    console.log(`http://localhost:8080/?email=${email}&city=${city}&funds=${funds}&phone=${phone}&name=${name}`);\n    axios(`http://localhost:8080?name=${name}&city=${city}&funds=${funds}&phone=${phone}&email=${email}&limit=5&offset=0`)\n      .then(data => {\n        console.log(data.data);\n\n        this.getDate(data.data)\n      })\n\n  }\n\n  // onPageChange=(page, sizePerPage)=> {\n  //   const currentIndex = (page - 1) * sizePerPage;\n  //   this.setState({\n  //     // data: sizePerPage,\n  //     currentPage: page\n  //   });\n  // }\n\n  objUpdate = () => {\n    console.log(this.state.rowStr.id);\n    axios.put(`http://localhost:8080/update/${this.state.rowStr.id}`, this.state.rowStr).then(data =>\n      console.log(data))\n  }\n  handelChange = (ev) => {\n    let vale = ev.target.value\n    let nam = ev.target.name\n    console.log(nam);\n    this.setState({\n\n      [nam]: vale\n    })\n    this.getAxios();\n\n  }\n  getDate = (data) => {\n    this.setState({\n      dataPersons: [...data.data],\n      isLoading: false,\n\n    })\n  }\n\n  setColum = (data) => {\n    this.setState({\n      rowStr: {\n        ...data\n      }\n    })\n\n    let timerId = setTimeout(this.objUpdate, 400)\n  }\n\n\n\n  render() {\n\n    const {\n      isLoading,\n      dataPersons,\n      value,\n      name,\n      onPageChange\n    } = this.state\n    return ( <\n      div className = \"App\" > {\n        isLoading ? < p > Loading... < /p> :<Table8  data={dataPersons} val={value} change={this.handelChange} nam={name} onPageChange={this.onPageChange} setChange={this.setColum} / >\n      }\n\n      <\n      /div>\n    );\n  }\n}\n\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}